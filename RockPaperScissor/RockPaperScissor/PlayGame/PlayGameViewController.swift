//
//  PlayGameViewController.swift
//  RockPaperScissor
//
//  Created by Ornthita.Eae on 5/7/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit

protocol PlayGameViewControllerInput {
    func display(response: PlayGameScene.PlayGame.Response)
    func showResult(_ result: String)
}

protocol PlayGameViewControllerOutput {
    func clickChoice(tag: Int) -> PlayGameScene.Playable
    func restart()
    func getResult()
    func play(request: PlayGameScene.PlayGame.Request)
}

class PlayGameViewController: UIViewController, PlayGameViewControllerInput {
    
    var output: PlayGameViewControllerOutput?
    var router: PlayGameRouter?
    
    @IBOutlet weak var processBot: UILabel!
    @IBOutlet weak var processPlayer: UILabel!
    @IBOutlet weak var playerScore: UILabel!
    @IBOutlet weak var botScore: UILabel!
    
    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        PlayGameConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        processBot.text = "Thinking.."
        processPlayer.text = "Thinking.."
        
        botScore.text = "0"
        playerScore.text = "0"
    }
    
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there
extension PlayGameViewController: PlayGamePresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }
}


// MARK: Requests
extension PlayGameViewController {
    //input
    @IBAction func onTapRPS(_ sender: UIButton) {
        let request = PlayGameScene.PlayGame.Request(sign: sender.tag)
       // output?.clickChoice(tag: sender.tag)
        output?.play(request: request)
        
    }
    
    @IBAction func onTapRestart(_ sender: UIButton) {
        output?.restart()
    }
    
}

// MARK: Display logic
extension PlayGameViewController {
    
    func display(response: PlayGameScene.PlayGame.Response) {
        processPlayer.text = response.playerProcess
        processBot.text = response.botProcess
        playerScore.text = String(response.playerScore)
        botScore.text = String(response.botScore)
    }
    
    
    
    func showResult(_ result: String) {
        DispatchQueue.main.asyncAfter(
            deadline: DispatchTime.now() + Double(Int64(2.0 * Double(NSEC_PER_SEC))) / Double(NSEC_PER_SEC), execute: {
                self.router?.showResult(result)
            })
    }
    
}

